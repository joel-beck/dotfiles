[project]
name = "<PROJECT_NAME>"
version = "<PROJECT_VERSION>"
description = "<PROJECT_DESCRIPTION>"
authors = [{ name = "Joel Beck", email = "<AUTHOR_EMAIL>" }]
dependencies = []
requires-python = ">=3.12"
license = { text = "MIT" }

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "wheel"]

[tool.ruff]
line-length = 100
fix = true # autofix behavior
show-fixes = true # enumerate fixed violations
output-format = "grouped" # Group violations by containing file
preview = true # Enable preview mode

[tool.ruff.format]
indent-style = "space" # Use spaces instead of tabs for indentation
preview = true # Enable preview style formatting.
quote-style = "double" # Prefer double quotes over single quotes
skip-magic-trailing-comma = false # Keep trailing commas

[tool.ruff.lint]
# see explanation of letter codes at https://beta.ruff.rs/docs/rules/
select = [
    "AIR", # Airflow
    # "ERA", # eradicate
    "FAST", # FastAPI
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    # "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    # "CPY", # flake8-copyright
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "DJ", # flake8-django
    # "EM", # flake8-errmsg
    "EXE", # flake8-executable
    # "FIX", # flake8-fixme
    # "FA", # flake8-future-annotations
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    # "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "SLOT", # flake8-slots
    "TID", # flake8-tidy-imports
    # "TD", # flake8-todos
    "TC", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    # "FLY", # flynt
    "I", # isort
    "C90", # mccabe
    "NPY", # NumPy-specific rules # causes toml parsing error: unknown field
    # "PD", # pandas-vet # false positives for polars
    "N", # pep8-naming
    "PERF", # Perflint
    "E", # pycodestyle Error
    "W", # pycodestyle Warning
    # "DOC", # pydoclint
    # "D", # pydocstyle
    "F", # Pyflakes
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "PLC", # Pylint Convention
    "PLE", # Pylint Error
    "PLR", # Pylint Refactor
    "PLW", # Pylint Warning
    "UP", # pyupgrade
    "FURB", # refurb
    "RUF", # Ruff-specific rules
    "TRY", # tryceratops

]
ignore = [
    "ANN101", # missing type annotation for `self` in method
    "ANN102", # missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "EXE002", # The file is executable but no shebang is present
    "G004", # Logging statement uses f-string
    "N803", # argument name should be lowercase
    "N806", # variable in function should be lowercase
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "PLW2901", # `for` loop variable `tag` overwritten by assignment target
    "PT004", # Fixture does not return anything, add leading underscore
    "PT011", # `pytest_raises(ValueError)` is too broad
    "RUF007", # prefer `itertools.pairwise()` over `zip()` when iterating over successive pairs
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "S603", # `subprocess` call: check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
    "TRY003", # Avoid specifying long messages outside the exception class
    # The following rules conflict with the Ruff formatter (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "D206", # indent-with-spaces
    "D300", # triple-single-quotes
    "E111", # indentation-with-invalid-multiple
    "E114", # indentation-with-invalid-multiple-comment
    "E117", # over-indented
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation
    "Q000", # bad-quotes-inline-string
    "Q001", # bad-quotes-multiline-string
    "Q002", # bad-quotes-docstring
    "Q003", # avoidable-escaped-quote
    "W191", # tab-indentation

]
# Never try to fix automatically
unfixable = [
    "F401", # unused imports
    "F841", # unused variables

]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # Allow `assert` statements in tests

]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true # suppress violations "dummy" variables like `_`

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"] # ignore violations for `id` builtin

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true # Allow dict calls with keyword arguments (e.g. `dict(a=1, b=2)`)

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false # `@pytest.fixture` instead of `@pytest.fixture()`
mark-parentheses = false # `@pytest.mark.foo` instead of `@pytest.mark.foo()`

[tool.ruff.lint.isort]
combine-as-imports = true # combines `as` imports on the same line
# Specify order of import sections, blank line between sections
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to use `cls` instead of `self` as first
# argument
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator"
]

# see all options at
# https://mypy.readthedocs.io/en/stable/config_file.html#the-mypy-configuration-file
[tool.mypy]
ignore_missing_imports = true # Import discovery
disallow_any_expr = false # Disallow dynamic typing
disallow_any_explicit = false
disallow_untyped_calls = true # Untyped definitions and calls
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
implicit_optional = false # None and Optional handling
strict_optional = true
warn_redundant_casts = true # Configuring warnings
warn_unused_ignores = false # too many false positives
warn_no_return = true
warn_return_any = false
warn_unreachable = true
allow_redefinition = true # Miscellaneous strictness flags
strict_equality = true
show_error_context = true # Configuring error messages
hide_error_codes = false
pretty = true
color_output = true
error_summary = true

[tool.pytest.ini_options]
testpaths = ["tests"]
# command line flags that are automatically added to all pytest commands
addopts = "-n auto --verbose --diff-symbols"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
markers = [
    "slow: marks tests as slow (run with `pytest -m 'slow', exclude with `pytest -m 'not slow'`)",
    "skip_ci: marks tests that are not run in CI (run with `pytest -m 'skip_ci'`)",
]

[tool.coverage.run]
branch = true
omit = [
    # exclude files in tests directory from coverage
    "tests/*",
    # exclude `__init__.py` files from coverage
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING:",
    "from typing_extensions import "
]
