{
  "Add Simple Docstring": {
    "body": ["\"\"\"", "$0", "\"\"\""],
    // a triple quote as trigger does not work since it triggers the snippet pop-up
    // window already after the first quote which gets in the way
    "prefix": "doc"
  },
  // SECTION: Python Snippets
  "Add f-String": {
    "body": ["print(f\"$0\")"],
    "prefix": ["f-String", "printf"]
  },
  "Import Dataclasses": {
    "body": ["from dataclasses import dataclass", "$0"],
    "prefix": "dataclasses"
  },
  "Import Matplotlib": {
    "body": ["import matplotlib.pyplot as plt", "$0"],
    "prefix": "matplotlib"
  },
  "Import NumPy": {
    "body": ["import numpy as np", "$0"],
    "prefix": "numpy"
  },
  "Import Pandas": {
    "body": ["import pandas as pd", "$0"],
    "prefix": "pandas"
  },
  "Import Pathlib": {
    "body": ["from pathlib import Path", "$0"],
    "prefix": "pathlib"
  },
  "Import Polars": {
    "body": ["import polars as pl", "$0"],
    "prefix": "polars"
  },
  "Import PyTorch": {
    "body": ["import torch", "$0"],
    "prefix": "torch"
  },
  // SUBSECTION: PyTorch Snippets
  "Import PyTorch Random Split": {
    "body": ["from torch.utils.data import random_split", "$0"],
    "prefix": "random split import"
  },
  // SUBSECTION: PyTorch Snippets
  // "PyTorch Imports Collection": {
  //   "prefix": "pytorch imports",
  //   "body": [
  //     "import matplotlib.pyplot as plt",
  //     "import numpy as np",
  //     "import pandas as pd",
  //     "import seaborn as sns",
  //     "import time",
  //     "import torch",
  //     "import torch.nn as nn",
  //     "import torch.optim as optim",
  //     "from torch.utils.data import DataLoader, Subset, random_split",
  //     "from torchvision import datasets, transforms",
  //     "$0"
  //   ]
  // },
  // "PyTorch get Device": {
  //   "prefix": "device",
  //   "body": [
  //     "device = torch.device(device=\"cuda\" if torch.cuda.is_available() else \"cpu\")",
  //     "$0"
  //   ]
  // },
  // "PyTorch plot Images": {
  //   "prefix": "plot images",
  //   "body": [
  //     "fig, axes = plt.subplots(nrows=${1:nrows}, ncols=${2:ncols}, figsize=(${3:height}, ${4:width}))",
  //     "for ax, image, label in zip(axes.flat, ${5:images}, ${6:labels}):",
  //     "    ax.set_title(label)",
  //     "    ax.axis(\"off\")",
  //     "    ax.imshow(image, cmap=\"gray\")",
  //     "plt.show()",
  //     "$0"
  //   ]
  // },
  // "PyTorch Random Split": {
  //   "prefix": "random split",
  //   "body": [
  //     "val_frac = ${1:0.1}",
  //     "val_size = int(val_frac * len(${2:trainset}))",
  //     "train_size = len($2) - val_size",
  //     "",
  //     "${3:trainset_name}, ${4:valset_name} = random_split(",
  //     "    dataset=$2,",
  //     "    lengths=[train_size, val_size],",
  //     "    generator=torch.Generator().manual_seed(${5:123}),",
  //     ")",
  //     "$0"
  //   ]
  // },
  // "PyTorch Subset": {
  //   "prefix": "subset",
  //   "body": [
  //     "subset_size = ${1:100}",
  //     "",
  //     "train_indices = torch.randint(0, len(${2:trainset}) + 1, size=(subset_size,))",
  //     "$2 = Subset(dataset=$2, indices=train_indices)",
  //     "",
  //     "val_indices = torch.randint(0, len(${3:valset}) + 1, size=(subset_size,))",
  //     "$3 = Subset(dataset=$3, indices=val_indices)",
  //     "$0"
  //   ]
  // },
  // "PyTorch Instantiate Model": {
  //   "prefix": [
  //     "NeuralNetwork",
  //     "Model"
  //   ],
  //   "body": [
  //     "class ${1:NeuralNetwork}(nn.Module):",
  //     "    def __init__(self, ${2:params}):",
  //     "        super($1, self).__init__()",
  //     "        $0",
  //     "",
  //     "    def forward(self, x):",
  //     "",
  //     "        return x",
  //     "",
  //     "${3:model} = $1($2).to(device=device)",
  //     "$3",
  //     "",
  //     "print_param_shapes($3)",
  //     "",
  //     "print_data_shapes($3, input_shape=(1, ${4:in_channels}, ${5:img_size}, $5))"
  //   ]
  // }
  "Import Pytest": {
    "body": ["import pytest", "$0"],
    "prefix": "pytest"
  },
  "Import Pytest LazyFixtures": {
    "body": ["from pytest_lazyfixture import lazy_fixture", "$0"],
    "prefix": "lazy"
  },
  "Import Seaborn": {
    "body": ["import seaborn as sns", "$0"],
    "prefix": "seaborn"
  },
  // SECTION: Import Snippets
  "Import Typing": {
    "body": ["from typing import $0"],
    "prefix": "typing"
  },
  "Import datetime": {
    "body": ["from datetime import datetime", "$0"],
    "prefix": "datetime"
  },
  "Initialize Class": {
    "body": [
      "class ${1:ClassName}(${2:ParentClass}):",
      "    def __init__(self):",
      "        ${3:super().__init__()}",
      "        $0"
    ],
    "prefix": "class"
  },
  "Initialize Dataclass": {
    "body": ["@dataclass", "class ${1:ClassName}:", "    $0"],
    "prefix": ["@"]
  },
  "Initialize Function": {
    "body": ["def ${1:function}(${2:args}) -> $3:", "    $0", "    pass"],
    "prefix": "def"
  },
  "Insert Try-Except Block": {
    "body": ["try:", "    $1", "except $2:", "    $0"],
    "prefix": "try except"
  },
  // SECTION: Interactive Mode Snippets
  "Insert code cell": {
    "body": ["", "#%%", "$0"],
    "prefix": "cell code"
  },
  "Insert code cell without newline": {
    "body": ["", "#%%"],
    "prefix": "cell code same line"
  },
  "Insert for-loop": {
    "body": ["for ${1:i} in ${2:range($3)}:", "    $0"],
    "prefix": "for"
  },
  "Insert markdown cell": {
    "body": ["", "#%% [markdown]", "# $0"],
    "prefix": "cell markdown"
  },
  "Main Function": {
    "body": [
      "def main() -> None:",
      "    $0",
      "",
      "if __name__ == '__main__':",
      "    main()"
    ],
    "prefix": "main"
  },
  // SECTION: Snippets by Package
  // SUBSECTION: Pandas Snippets
  "Pandas Show all Columns": {
    "body": ["pd.set_option(\"display.max_columns\", None)", "$0"],
    "prefix": "pandas all columns"
  },
  "SQL Query": {
    "body": ["\"\"\"--sql", "$0", "\"\"\""],
    "prefix": "sql"
  },
  // SUBSECTION: Seaborn Snippets
  "Set Seaborn Theme": {
    "body": ["sns.set_theme(style=\"${1|whitegrid,darkgrid|}\")", "$0"],
    "prefix": "theme seaborn"
  },
  // SUBSECTION: Scikit-Learn Snippets
  "Train Test Split": {
    "body": ["X_train, X_test, y_train, y_test = train_test_split(X, y)", "$0"],
    "prefix": "train test split"
  }
}
